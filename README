
What's new in version 0.10:

  SPLICE method supported.  Many minor changes.

What's new in version 0.02:

  STORESIZE method implements $#array = $n.

What's new in version 0.01:

  This is the initial release.

----------------------------------------------------------------

NAME
    Tie::File - Access the lines of a disk file via a Perl array

SYNOPSIS
            # This file documents Tie::File version 0.10

            tie @array, 'Tie::File', filename or die ...;

            $array[13] = 'blah';     # line 13 of the file is now 'blah'
            print $array[42];        # display line 42 of the file

            $n_recs = @array;        # how many records are in the file?
            $#array = $n_recs - 2;   # chop records off the end

            # As you would expect
            @old_recs = splice @array, 3, 7, new recs...;

            untie @array;            # all finished


DESCRIPTION
    `Tie::File' represents a regular text file as a Perl array. Each
    element in the array corresponds to a record in the file. The
    first line of the file is element 0 of the array; the second
    line is element 1, and so on.

    The file is *not* loaded into memory, so this will work even for
    gigantic files.

    Changes to the array are reflected in the file immediately.

  `recsep'

    What is a 'record'? By default, the meaning is the same as for
    the `<...>' operator: It's a string terminated by `$/', which is
    probably `"\n"' or `"\r\n"'. You may change the definition of
    "record" by supplying the `recsep' option in the `tie' call:

            tie @array, 'Tie::File', $file, recsep => 'es';


    This says that records are delimited by the string `es'. If the
    file contained the following data:

            Curse these pesky flies!\n


    then the `@array' would appear to have four elements:

            "Curse thes"
            "e pes"
            "ky flies"
            "!\n"


    An undefined value is not permitted as a record separator.
    Perl's special "paragraph mode" semantics (à la `$/ = ""') are
    not emulated.

    Records read from the tied array will have the record separator
    string on the end, just as if they were read from the `<...>'
    operator. Records stored into the array will have the record
    separator string appended before they are written to the file,
    if they don't have one already. For example, if the record
    separator string is `"\n"', then the following two lines do
    exactly the same thing:

            $array[17] = "Cherry pie";
            $array[17] = "Cherry pie\n";


    The result is that the contents of line 17 of the file will be
    replaced with "Cherry pie"; a newline character will separate
    line 17 from line 18. There is no way to create a file whose
    trailing record separator string is missing.

    Inserting records that *contain* the record separator string
    will produce a reasonable result, but if you can't foresee what
    this result will be, you'd better avoid doing this.

  `mode'

    Normally, the specified file will be opened for read and write
    access, and will be created if it does not exist. (That is, the
    flags `O_RDWR | O_CREAT' are supplied in the `open' call.) If
    you want to change this, you may supply alternative flags in the
    `mode' option. See the Fcntl manpage for a listing of available
    flags. For example:

            # open the file if it exists, but fail if it does not exist
            use Fcntl 'O_RDWR';
            tie @array, 'Tie::File', $file, mode => O_RDWR;

            # create the file if it does not exist
            use Fcntl 'O_RDWR', 'O_CREAT';
            tie @array, 'Tie::File', $file, mode => O_RDWR | O_CREAT;

            # open an existing file in read-only mode
            use Fcntl 'O_RDONLY';
            tie @array, 'Tie::File', $file, mode => O_RDONLY;


    Opening the data file in write-only or append mode is not
    supported.

  `cachesize'

    Records read in from the file are cached, to avoid having to re-
    read them repeatedly. If you read the same record twice, the
    first time it will be stored in memory, and the second time it
    will be fetched from memory.

    The cache has a bounded size; when it exceeds this size, the
    least-recently visited records will be purged from the cache.
    The default size is 2Mib. You can adjust the amount of space
    used for the cache by supplying the `cachesize' option. The
    argument is the desired cache size, in bytes.

            # I have a lot of memory, so use a large cache to speed up access
            tie @array, 'Tie::File', $file, cachesize => 20_000_000;


    Setting the cache size to 0 will inhibit caching; records will
    be fetched from disk every time you examine them.

  Option Format

    `-mode' is a synonym for `mode'. `-recsep' is a synonym for
    `recsep'. `-cachesize' is a synonym for `cachesize'. You get the
    idea.

Public Methods
    The `tie' call returns an object, say `$o'. You may call

            $rec = $o->FETCH($n);
            $o->STORE($n, $rec);


    to fetch or store the record at line `$n', respectively. There
    are no other public methods in this package.

CAVEATS
    (That's Latin for 'warnings'.)

  Efficiency Note

    Every effort was made to make this module efficient.
    Nevertheless, changing the size of a record in the middle of a
    large file will always be slow, because everything after the new
    record must be move.

    In particular, note that:

            # million-line file
            for (@file_array) {
              $_ .= 'x';
            }


    is likely to be very slow, because the first iteration must
    relocate lines 1 through 999,999; the second iteration must
    relocate lines 2 through 999,999, and so on. The relocation is
    done using block writes, however, so it's not as slow as it
    might be.

    A future version of this module will provide some mechanism for
    getting better performance in such cases, by deferring the
    writing until it can be done all at once.

  Efficiency Note 2

    Not every effort was made to make this module as efficient as
    possible. `FETCHSIZE' should use binary search instead of linear
    search. The cache's LRU queue should be a heap instead of a
    list. These defects are probably minor; in any event, they will
    be fixed in a later version of the module.

  Efficiency Note 3

    The author has supposed that since this module is concerned with
    file I/O, almost all normal use of it will be heavily I/O bound,
    and that the time to maintain complicated data structures inside
    the module will be dominated by the time to actually perform the
    I/O. This suggests, for example, that and LRU read-cache is a
    good tradeoff, even if it requires substantial adjustment
    following a `splice' operation.

  Missing Methods

    The tied array does not yet support `push', `pop', `shift',
    `unshift', `splice', or size-setting via `$#array = $n'. I will
    put these in soon.

AUTHOR
    Mark Jason Dominus

    To contact the author, send email to: `mjd-perl-
    tiefile+@plover.com'

    To receive an announcement whenever a new version of this module
    is released, send a blank email message to `mjd-perl-tiefile-
    subscribe@plover.com'.

LICENSE
    `Tie::File' version 0.10 is copyright (C) 2002 Mark Jason
    Dominus.

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this program; it should be in the file
    `COPYING'. If not, write to the Free Software Foundation, Inc.,
    59 Temple Place, Suite 330, Boston, MA 02111 USA

    For licensing inquiries, contact the author at:

            Mark Jason Dominus
            255 S. Warnock St.
            Philadelphia, PA 19107


WARRANTY
    `Tie::File' version 0.10 comes with ABSOLUTELY NO WARRANTY. For
    details, see the license.

TODO
    `push', `pop', `shift', `unshift'.

    More tests. (Configuration options, cache flushery, alternative
    record separators. _twrite shoule be tested separately, because
    there are a lot of weird special cases lurking in there.)

    More tests. (Stuff I didn't think of yet.)

    File locking.

    Deferred writing. (!!!)

    Paragraph mode?

    More tests.

    Fixed-length mode.

